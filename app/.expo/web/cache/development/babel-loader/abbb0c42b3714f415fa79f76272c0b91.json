{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport { gql, useQuery } from \"urql\";\nexport function useFindAllQuestions() {\n  var query = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    query {\\n      questions {\\n        id\\n        number\\n        question\\n        answer1\\n        answer2\\n        answer3\\n        answer4\\n      }\\n    }\\n  \"])));\n\n  var _useQuery = useQuery({\n    query: query,\n    variables: {}\n  }),\n      _useQuery2 = _slicedToArray(_useQuery, 2),\n      result = _useQuery2[0],\n      reexecuteQuery = _useQuery2[1];\n\n  var data = result.data,\n      fetching = result.fetching,\n      error = result.error;\n  return {\n    data: data,\n    fetching: fetching,\n    error: error,\n    reexecuteQuery: reexecuteQuery\n  };\n}","map":{"version":3,"sources":["/home/mat/projects/expo-app/app/pages/questions.graphql.ts"],"names":["gql","useQuery","useFindAllQuestions","query","variables","result","reexecuteQuery","data","fetching","error"],"mappings":";;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,MAA9B;AAEA,OAAO,SAASC,mBAAT,GAA+B;AACpC,MAAMC,KAAK,GAAGH,GAAH,gPAAX;;AAaA,kBAAiCC,QAAQ,CAAC;AACxCE,IAAAA,KAAK,EAALA,KADwC;AAExCC,IAAAA,SAAS,EAAE;AAF6B,GAAD,CAAzC;AAAA;AAAA,MAAOC,MAAP;AAAA,MAAeC,cAAf;;AAIA,MAAQC,IAAR,GAAkCF,MAAlC,CAAQE,IAAR;AAAA,MAAcC,QAAd,GAAkCH,MAAlC,CAAcG,QAAd;AAAA,MAAwBC,KAAxB,GAAkCJ,MAAlC,CAAwBI,KAAxB;AAEA,SAAO;AAAEF,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,QAAQ,EAARA,QAAR;AAAkBC,IAAAA,KAAK,EAALA,KAAlB;AAAyBH,IAAAA,cAAc,EAAdA;AAAzB,GAAP;AACD","sourcesContent":["import { gql, useQuery } from \"urql\";\n\nexport function useFindAllQuestions() {\n  const query = gql`\n    query {\n      questions {\n        id\n        number\n        question\n        answer1\n        answer2\n        answer3\n        answer4\n      }\n    }\n  `;\n  const [result, reexecuteQuery] = useQuery({\n    query,\n    variables: {},\n  });\n  const { data, fetching, error } = result;\n\n  return { data, fetching, error, reexecuteQuery };\n}\n"]},"metadata":{},"sourceType":"module"}