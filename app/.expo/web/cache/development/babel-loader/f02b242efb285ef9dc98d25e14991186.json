{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mat/projects/expo-app/app/App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DetailsScreen } from \"./pages/Details\";\nimport { HomeScreen } from \"./pages/Home\";\nimport { createClient, Provider } from \"urql\";\n\nvar wait = function wait(timeout) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, timeout);\n  });\n};\n\nvar Stack = createStackNavigator();\nvar client = createClient({\n  url: \"http://192.168.1.21:4000/graphql\",\n  requestPolicy: \"cache-and-network\"\n});\n\nfunction App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isUsername = _useState4[0],\n      setIsUsername = _useState4[1];\n\n  useEffect(function () {\n    var getUsername = function getUsername() {\n      var response;\n      return _regeneratorRuntime.async(function getUsername$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"username\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response) {\n                setIsUsername(true);\n              }\n\n              setLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getUsername();\n  }, []);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      refreshing = _React$useState2[0],\n      setRefreshing = _React$useState2[1];\n\n  var onRefresh = React.useCallback(function () {\n    setRefreshing(true);\n    wait(2000).then(function () {\n      return setRefreshing(false);\n    });\n  }, []);\n  return React.createElement(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, !loading && React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, !isUsername && React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 29\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Details\",\n    component: DetailsScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mat/projects/expo-app/app/App.tsx"],"names":["AsyncStorage","NavigationContainer","createStackNavigator","React","useEffect","useState","DetailsScreen","HomeScreen","createClient","Provider","wait","timeout","Promise","resolve","setTimeout","Stack","client","url","requestPolicy","App","loading","setLoading","isUsername","setIsUsername","getUsername","getItem","response","refreshing","setRefreshing","onRefresh","useCallback","then"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT;AACA,SAASC,UAAT;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,MAAvC;;AASA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,OAAD,EAAkB;AAC7B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,WAAaC,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAvB;AAAA,GAAZ,CAAP;AACD,CAFD;;AAIA,IAAMI,KAAK,GAAGb,oBAAoB,EAAlC;AACA,IAAMc,MAAM,GAAGR,YAAY,CAAC;AAC1BS,EAAAA,GAAG,oCADuB;AAE1BC,EAAAA,aAAa,EAAE;AAFW,CAAD,CAA3B;;AAKA,SAASC,GAAT,GAAe;AACb,kBAA8Bd,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOe,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAoChB,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOiB,UAAP;AAAA,MAAmBC,aAAnB;;AACAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMoB,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKxB,YAAY,CAACyB,OAAb,CAAqB,UAArB,CADL;;AAAA;AACZC,cAAAA,QADY;;AAElB,kBAAIA,QAAJ,EAAc;AACZH,gBAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AACDF,cAAAA,UAAU,CAAC,KAAD,CAAV;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAOAG,IAAAA,WAAW;AACZ,GATQ,EASN,EATM,CAAT;;AAWA,wBAAoCrB,KAAK,CAACE,QAAN,CAAe,KAAf,CAApC;AAAA;AAAA,MAAOsB,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,SAAS,GAAG1B,KAAK,CAAC2B,WAAN,CAAkB,YAAM;AACxCF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAlB,IAAAA,IAAI,CAAC,IAAD,CAAJ,CAAWqB,IAAX,CAAgB;AAAA,aAAMH,aAAa,CAAC,KAAD,CAAnB;AAAA,KAAhB;AACD,GAHiB,EAGf,EAHe,CAAlB;AAKA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACI,OAAD,IACC,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACE,UAAD,IAAe,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEf,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlB,EAGE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAED,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFJ,CADF,CADF;AAaD;;AAED,eAAea,GAAf","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DetailsScreen } from \"./pages/Details\";\nimport { HomeScreen } from \"./pages/Home\";\nimport { createClient, Provider } from \"urql\";\nimport {\n  RefreshControl,\n  SafeAreaView,\n  ScrollView,\n  StyleSheet,\n  Text,\n} from \"react-native\";\n\nconst wait = (timeout: any) => {\n  return new Promise((resolve) => setTimeout(resolve, timeout));\n};\n\nconst Stack = createStackNavigator();\nconst client = createClient({\n  url: `http://192.168.1.21:4000/graphql`,\n  requestPolicy: \"cache-and-network\",\n});\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [isUsername, setIsUsername] = useState(false);\n  useEffect(() => {\n    const getUsername = async () => {\n      const response = await AsyncStorage.getItem(\"username\");\n      if (response) {\n        setIsUsername(true);\n      }\n      setLoading(false);\n    };\n    getUsername();\n  }, []);\n\n  const [refreshing, setRefreshing] = React.useState(false);\n\n  const onRefresh = React.useCallback(() => {\n    setRefreshing(true);\n    wait(2000).then(() => setRefreshing(false));\n  }, []);\n\n  return (\n    <Provider value={client}>\n      <NavigationContainer>\n        {!loading && (\n          <Stack.Navigator>\n            {/* {!isUsername && <Stack.Screen name=\"Home\" component={HomeScreen} />} */}\n            {!isUsername && <Stack.Screen name=\"Home\" component={HomeScreen} />}\n            <Stack.Screen name=\"Details\" component={DetailsScreen} />\n          </Stack.Navigator>\n        )}\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}