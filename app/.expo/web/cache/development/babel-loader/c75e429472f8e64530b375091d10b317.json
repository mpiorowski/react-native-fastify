{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mat/projects/expo-app/app/App.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DetailsScreen } from \"./pages/Details\";\nimport { HomeScreen } from \"./pages/Home\";\nimport { createClient, Provider } from \"urql\";\nvar Stack = createStackNavigator();\nvar client = createClient({\n  url: \"localhost:4000/graphql\",\n  requestPolicy: \"cache-and-network\"\n});\n\nfunction App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isUsername = _useState4[0],\n      setIsUsername = _useState4[1];\n\n  useEffect(function () {\n    var getUsername = function getUsername() {\n      var response;\n      return _regeneratorRuntime.async(function getUsername$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"username\"));\n\n            case 2:\n              response = _context.sent;\n\n              if (response) {\n                setIsUsername(true);\n              }\n\n              setLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getUsername();\n  }, []);\n  return React.createElement(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(NavigationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, !loading && React.createElement(Stack.Navigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, !isUsername && React.createElement(Stack.Screen, {\n    name: \"Home\",\n    component: HomeScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 29\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"Details\",\n    component: DetailsScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mat/projects/expo-app/app/App.tsx"],"names":["AsyncStorage","NavigationContainer","createStackNavigator","React","useEffect","useState","DetailsScreen","HomeScreen","createClient","Provider","Stack","client","url","requestPolicy","App","loading","setLoading","isUsername","setIsUsername","getUsername","getItem","response"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT;AACA,SAASC,UAAT;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,MAAvC;AAEA,IAAMC,KAAK,GAAGR,oBAAoB,EAAlC;AACA,IAAMS,MAAM,GAAGH,YAAY,CAAC;AAC1BI,EAAAA,GAAG,0BADuB;AAE1BC,EAAAA,aAAa,EAAE;AAFW,CAAD,CAA3B;;AAKA,SAASC,GAAT,GAAe;AACb,kBAA8BT,QAAQ,CAAC,IAAD,CAAtC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAoCX,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AACAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMe,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACKnB,YAAY,CAACoB,OAAb,CAAqB,UAArB,CADL;;AAAA;AACZC,cAAAA,QADY;;AAElB,kBAAIA,QAAJ,EAAc;AACZH,gBAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AACDF,cAAAA,UAAU,CAAC,KAAD,CAAV;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAOAG,IAAAA,WAAW;AACZ,GATQ,EASN,EATM,CAAT;AAWA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAER,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACI,OAAD,IACC,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEG,CAACE,UAAD,IAAe,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,MAAnB;AAA0B,IAAA,SAAS,EAAEV,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlB,EAGE,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,SAAS,EAAED,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFJ,CADF,CADF;AAaD;;AAED,eAAeQ,GAAf","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { DetailsScreen } from \"./pages/Details\";\nimport { HomeScreen } from \"./pages/Home\";\nimport { createClient, Provider } from \"urql\";\n\nconst Stack = createStackNavigator();\nconst client = createClient({\n  url: `localhost:4000/graphql`,\n  requestPolicy: \"cache-and-network\",\n});\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [isUsername, setIsUsername] = useState(false);\n  useEffect(() => {\n    const getUsername = async () => {\n      const response = await AsyncStorage.getItem(\"username\");\n      if (response) {\n        setIsUsername(true);\n      }\n      setLoading(false);\n    };\n    getUsername();\n  }, []);\n\n  return (\n    <Provider value={client}>\n      <NavigationContainer>\n        {!loading && (\n          <Stack.Navigator>\n            {/* {!isUsername && <Stack.Screen name=\"Home\" component={HomeScreen} />} */}\n            {!isUsername && <Stack.Screen name=\"Home\" component={HomeScreen} />}\n            <Stack.Screen name=\"Details\" component={DetailsScreen} />\n          </Stack.Navigator>\n        )}\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}